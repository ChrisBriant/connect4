{"ast":null,"code":"var _jsxFileName = \"/home/chris/Documents/connect4/src/components/uipanel.js\";\nimport React, { Component } from \"react\";\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Container from 'react-bootstrap/Container';\nimport Button from 'react-bootstrap/Button';\nimport NumericInput from 'react-numeric-input';\nimport WaitCircle from './waitcircle.js';\nimport Slot from './slot';\nimport { animateScroll } from \"react-scroll\";\nimport socketIOClient from \"socket.io-client\";\n/*\nimport circle from '../assets/circle.svg';\nimport square from '../assets/square.svg';\nimport waves from '../assets/waves.svg';\nimport cross from '../assets/cross.svg';\nimport star from '../assets/star.svg';\nimport back from '../assets/back.svg';\nimport tick from '../assets/check-circle-regular.svg';\nimport mistake from '../assets/times-circle-regular.svg';\nimport exit from '../assets/door-open-solid-wh.svg';\nimport placeholder from '../assets/placeholder.svg';\n*/\n//const ENDPOINT = \"https://zener-card-server.herokuapp.com/\";\n\nclass UIPanel extends Component {\n  constructor(props) {\n    super(props);\n\n    if (this.props.multiPlayer) {\n      var turns = 2;\n    } else {\n      var turns = 1;\n    } //Create array for grid\n\n\n    var grid = [];\n\n    for (var i = 1; i < 7; i++) {\n      var cols = [];\n\n      for (var j = 1; j < 7; j++) {\n        cols[j] = {\n          'idx': i * 10 + j,\n          'slot': 'empty'\n        };\n      }\n\n      grid.push(cols);\n    }\n\n    this.state = {\n      name: \"\",\n      isStart: true,\n      cardsDisabled: true,\n      isFinished: false,\n      numberOfCards: 25,\n      drawCount: 0,\n      connected: false,\n      cardDrawn: false,\n      guessMade: false,\n      drawReady: true,\n      otherPlayerFound: false,\n      playerPickedCard: false,\n      playerPick: false,\n      cardMessage: \"Click draw card to select the first card from the server\",\n      turns: turns,\n      otherPlayerVerdict: null,\n      results: [],\n      grid: grid\n    };\n    this.clickCard = this.clickCard.bind(this);\n    this.drawCard = this.drawCard.bind(this);\n    this.handleChangeCardCount = this.handleChangeCardCount.bind(this);\n    this.handleStart = this.handleStart.bind(this);\n    this.handleChangeName = this.handleChangeName.bind(this);\n    this.goToHome = this.goToHome.bind(this);\n    this.initGame = this.initGame.bind(this);\n    this.finish = this.finish.bind(this);\n    this.getCardName = this.getCardName.bind(this);\n    this.getVerdict = this.getVerdict.bind(this);\n    this.scrollToBottom = this.scrollToBottom.bind(this);\n    this.hoverSlot = this.hoverSlot.bind(this);\n    this.leaveSlot = this.leaveSlot.bind(this);\n    this.clickSlot = this.clickSlot.bind(this);\n  }\n\n  getCardName(id) {\n    return null;\n  }\n\n  componentDidMount() {}\n\n  componentDidUpdate() {\n    this.scrollToBottom();\n  }\n\n  scrollToBottom() {\n    animateScroll.scrollToBottom({\n      containerId: \"resultpanel\"\n    });\n  }\n\n  initGame() {\n    /*\n    var component = this;\n    this.socket = socketIOClient.connect(ENDPOINT);\n     this.socket.on('socketID', function() {\n      this.emit('new_player',component.state.name,component.props.multiPlayer);\n      if(!component.props.multiPlayer) {\n        component.setState({connected:true});\n      }\n    });\n     this.socket.on('player_found', function(otherPlayer,drawReady) {\n      component.setState({playerPick:drawReady, connected:true, otherPlayer:otherPlayer,otherPlayerFound:true});\n      if(component.state.playerPick) {\n        var cardMessage = \"Choose a card, try and transmit that image to \" + component.state.otherPlayer.name;\n        var cardsDisabled = false;\n      } else {\n        var cardMessage = \"Please wait for \" + component.state.otherPlayer.name + \" to select a card\";\n        var cardsDisabled = true;\n      }\n      component.setState({cardMessage:cardMessage, cardsDisabled:cardsDisabled});\n      if(!drawReady) {\n        //Signal to the server to start the other player\n        this.emit('other_player_start',otherPlayer.id);\n      }\n    });\n     this.socket.on('card_drawn', function() {\n    });\n     this.socket.on('guess_result', function(cardNo) {\n    });\n     this.socket.on('draw_again', function(result) {\n      //Allow the player to draw another card\n      if(result) {\n        var cardMessage = component.state.otherPlayer.name + \" guessed Correctly! Please pick another card\";\n      } else {\n        var cardMessage = component.state.otherPlayer.name + \" guessed Incorrectly! Please pick another card\";\n      }\n      component.setState({playerPickedCard:false, cardsDisabled:false, cardMessage:cardMessage, cardDrawn:false});\n    });\n     this.socket.on('turn_change', function() {\n    });\n    */\n  }\n\n  clickCard(e) {}\n\n  drawCard(e) {}\n\n  handleChangeCardCount(e) {}\n\n  handleChangeName(e) {\n    this.setState({\n      name: e.target.value\n    });\n  }\n\n  handleStart() {\n    this.setState({\n      isStart: false\n    });\n    this.initGame();\n  }\n\n  finish() {\n    if (this.props.multiPlayer) {\n      //Rules for other player dropping out - decided to kick both off and show message\n      this.socket.emit('multiplayer_finished', this.state.otherPlayer.id, true);\n      this.setState({\n        iDisconnected: true\n      });\n    } else {\n      this.socket.disconnect();\n      var verdict = this.getVerdict(this.state.results.filter(r => r.result).length, this.state.results.length, true);\n      this.setState({\n        isFinished: true,\n        verdict: verdict\n      });\n    }\n  }\n\n  goToHome() {\n    this.props.history.push('/');\n  }\n\n  getVerdict(totalCorrect, total, isMe) {}\n\n  hoverSlot(e) {}\n\n  leaveSlot(e) {}\n\n  clickSlot(e) {\n    var row = e.target.id % 10;\n    var col = Math.floor(e.target.id / 10);\n\n    for (var i = row; i < 7; i++) {\n      //var grrow = this.state.grid[row];\n      //var grcol = grrow.filter(grid => grid.idx == col*10+i);\n      var grrow = this.state.grid[i - 1];\n      var grcol = grrow[col - 1];\n      console.log(grrow);\n      console.log(col * 10 + i); //console.log(grcol);\n    }\n\n    console.log(row, \" \", col);\n  }\n\n  render() {\n    /*\n    if(!this.props.multiPlayer) {\n      var selectedCard = <Col>{ !this.state.guessMade ? <img src={placeholder} alt=\"placeholder\" className=\"card\"/> : <img src={this.state.cardSelection} alt=\"placeholder\" className=\"card\"/> }</Col>;\n    } else {\n      var selectedCard = <Col>{ !this.state.guessMade && !this.state.playerPickedCard ? <img src={placeholder} alt=\"placeholder\" className=\"card\"/> : <img src={this.state.cardSelection}  alt=\"placeholder\" className=\"card\"/> }</Col>;\n    }\n     if(this.state.isFinished && this.props.multiPlayer && !this.state.playerDisconnect) {\n      console.log(this.state.otherPlayer);\n      //Produce a panel to show the other player results\n      var otherResults = [];\n      for(var i=0;i<this.state.otherPlayer.cards.length;i++) {\n        otherResults.push({card:this.getCardName(parseInt(this.state.otherPlayer.cards[i])),result:this.state.otherPlayer.results[i]});\n      }\n      var otherPlayerResults =  <Col><div className=\"resultpanel\">{ otherResults.map( (result,idx) => (\n                                  <Row key={idx}>\n                                    <Col><img alt=\"card\" src={result.card}></img></Col>\n                                    <Col>\n                                      { !result.result ? <img src={mistake} alt=\"cross\" className=\"iconsmall\"></img> : <img src={tick} alt=\"tick\" className=\"iconsmall\"></img>  }\n                                    </Col>\n                                  </Row>\n                                ))}</div></Col>\n      var otherPlayerScore = <Col>{otherResults.filter(r => r.result).length}  /  { otherResults.length }</Col>\n      var otherPlayerName = <Col>{this.state.otherPlayer.name}</Col>;\n    } else {\n      var otherPlayerName = <Row><Col></Col></Row>;\n      var otherPlayerResults = <Col></Col>;\n      var otherPlayerScore = <Col></Col>;\n    }\n     if(!this.props.multiPlayer) {\n      var drawButton = <div>{this.state.connected && this.state.drawReady ? <Button variant=\"outline-warning\" onClick={this.drawCard}>Draw Card</Button> : <Button variant=\"outline-warning\" disabled>Draw Card</Button> }</div>\n    } else {\n      var drawButton = null;\n    }*/\n    if (this.state.isStart) {\n      return /*#__PURE__*/React.createElement(Container, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 15\n        }\n      }, \"Enter a nickname:\")), /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"input\", {\n        value: this.state.name,\n        className: \"form-control\",\n        onChange: this.handleChangeName,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 15\n        }\n      }))), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        md: 6,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 15\n        }\n      }, \"Select number of tries:\")), /*#__PURE__*/React.createElement(Col, {\n        md: 3,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(NumericInput, {\n        min: 1,\n        max: 100,\n        value: this.state.numberOfCards,\n        onChange: this.handleChangeCardCount,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 15\n        }\n      })), /*#__PURE__*/React.createElement(Col, {\n        md: 3,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 13\n        }\n      })), /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 18\n        }\n      }, \"25 is the recommended value, for the most accurate results, but you can change this to any number between 1 an 100\"))), /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        md: 2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        onClick: this.handleStart,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 25\n        }\n      }, \"START\")), /*#__PURE__*/React.createElement(Col, {\n        md: 2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        onClick: this.goToHome,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 25\n        }\n      }, \" Exit\"))));\n    } else if (this.state.isFinished && !this.state.playerDisconnect) {\n      return /*#__PURE__*/React.createElement(Container, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"h4\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 18\n        }\n      }, \"Results:\"))), /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 287,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 13\n        }\n      }, this.state.name)), /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 13\n        }\n      }, this.state.results.filter(r => r.result).length, \"  /  \", this.state.results.length, \" \")), /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 294,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"resultpanel\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 15\n        }\n      }, this.state.results.map((result, idx) => /*#__PURE__*/React.createElement(Row, {\n        key: idx,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 21\n        }\n      })))))), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 16\n        }\n      }, this.state.verdict)), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 308,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 16\n        }\n      }, this.state.otherPlayerVerdict)), /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 311,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        onClick: this.goToHome,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 311,\n          columnNumber: 18\n        }\n      }, \"Exit\"))));\n    } else if (this.state.isFinished && this.state.playerDisconnect) {\n      return /*#__PURE__*/React.createElement(Container, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 317,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 318,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 319,\n          columnNumber: 13\n        }\n      }, !this.state.iDisconnected ? /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 320,\n          columnNumber: 43\n        }\n      }, \"The other player has disconnected\") : /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 320,\n          columnNumber: 86\n        }\n      }, \"You have disconnected\"), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 321,\n          columnNumber: 13\n        }\n      }, \"Both players must finish their round for scoring to happen.\"))), /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 324,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 325,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        onClick: this.goToHome,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 325,\n          columnNumber: 18\n        }\n      }, \"Exit\"))));\n    } else if (this.props.multiPlayer && !this.state.otherPlayerFound) {\n      return /*#__PURE__*/React.createElement(Container, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 331,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 332,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 333,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 334,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(\"h4\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 335,\n          columnNumber: 13\n        }\n      }, \"Waiting for other player\"), /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 336,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 337,\n          columnNumber: 13\n        }\n      })), /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 339,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 340,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 341,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 342,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(WaitCircle, {\n        runAnim: true,\n        speed: 100,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 342,\n          columnNumber: 18\n        }\n      })), /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 343,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 344,\n          columnNumber: 13\n        }\n      })));\n    } else {\n      return (\n        /*#__PURE__*/\n        //Main Board\n        React.createElement(\"div\", {\n          className: \"panel\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 351,\n            columnNumber: 11\n          }\n        }, this.state.grid.map((row, i) => /*#__PURE__*/React.createElement(\"div\", {\n          className: \"slotrow\",\n          key: i,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 353,\n            columnNumber: 19\n          }\n        }, row.map(item => /*#__PURE__*/React.createElement(\"div\", {\n          onMouseEnter: this.hoverSlot,\n          onMouseLeave: this.leaveSlot,\n          onClick: this.clickSlot,\n          id: item.idx,\n          key: item.idx,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 355,\n            columnNumber: 23\n          }\n        }, /*#__PURE__*/React.createElement(Slot, {\n          className: \"slotcol\",\n          imageName: item.slot,\n          id: item.idx,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 356,\n            columnNumber: 27\n          }\n        }))))))\n      );\n    }\n  }\n\n}\n\nexport default UIPanel;","map":{"version":3,"sources":["/home/chris/Documents/connect4/src/components/uipanel.js"],"names":["React","Component","Row","Col","Container","Button","NumericInput","WaitCircle","Slot","animateScroll","socketIOClient","UIPanel","constructor","props","multiPlayer","turns","grid","i","cols","j","push","state","name","isStart","cardsDisabled","isFinished","numberOfCards","drawCount","connected","cardDrawn","guessMade","drawReady","otherPlayerFound","playerPickedCard","playerPick","cardMessage","otherPlayerVerdict","results","clickCard","bind","drawCard","handleChangeCardCount","handleStart","handleChangeName","goToHome","initGame","finish","getCardName","getVerdict","scrollToBottom","hoverSlot","leaveSlot","clickSlot","id","componentDidMount","componentDidUpdate","containerId","e","setState","target","value","socket","emit","otherPlayer","iDisconnected","disconnect","verdict","filter","r","result","length","history","totalCorrect","total","isMe","row","col","Math","floor","grrow","grcol","console","log","render","playerDisconnect","map","idx","item","slot"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Container from 'react-bootstrap/Container';\nimport Button from 'react-bootstrap/Button';\nimport NumericInput from 'react-numeric-input';\nimport WaitCircle from './waitcircle.js';\nimport Slot from './slot';\nimport { animateScroll } from \"react-scroll\";\nimport socketIOClient from \"socket.io-client\";\n\n/*\nimport circle from '../assets/circle.svg';\nimport square from '../assets/square.svg';\nimport waves from '../assets/waves.svg';\nimport cross from '../assets/cross.svg';\nimport star from '../assets/star.svg';\nimport back from '../assets/back.svg';\nimport tick from '../assets/check-circle-regular.svg';\nimport mistake from '../assets/times-circle-regular.svg';\nimport exit from '../assets/door-open-solid-wh.svg';\nimport placeholder from '../assets/placeholder.svg';\n*/\n\n//const ENDPOINT = \"https://zener-card-server.herokuapp.com/\";\n\nclass UIPanel extends Component {\n\n  constructor(props) {\n    super(props);\n    if(this.props.multiPlayer) {\n      var turns = 2;\n    } else {\n      var turns = 1;\n    }\n\n    //Create array for grid\n    var grid = [];\n    for(var i=1;i<7;i++) {\n      var cols = [];\n      for(var j=1;j<7;j++) {\n        cols[j] = {'idx':i*10+j,'slot':'empty'};\n      }\n      grid.push(cols);\n    }\n\n    this.state = {\n      name: \"\",\n      isStart: true,\n      cardsDisabled: true,\n      isFinished: false,\n      numberOfCards: 25,\n      drawCount: 0,\n      connected: false,\n      cardDrawn: false,\n      guessMade: false,\n      drawReady: true,\n      otherPlayerFound: false,\n      playerPickedCard: false,\n      playerPick: false,\n      cardMessage: \"Click draw card to select the first card from the server\",\n      turns: turns,\n      otherPlayerVerdict:null,\n      results: [],\n      grid: grid\n    }\n    this.clickCard = this.clickCard.bind(this);\n    this.drawCard = this.drawCard.bind(this);\n    this.handleChangeCardCount = this.handleChangeCardCount.bind(this);\n    this.handleStart = this.handleStart.bind(this);\n    this.handleChangeName = this.handleChangeName.bind(this);\n    this.goToHome = this.goToHome.bind(this);\n    this.initGame = this.initGame.bind(this);\n    this.finish = this.finish.bind(this);\n    this.getCardName = this.getCardName.bind(this);\n    this.getVerdict = this.getVerdict.bind(this);\n    this.scrollToBottom = this.scrollToBottom.bind(this);\n    this.hoverSlot = this.hoverSlot.bind(this);\n    this.leaveSlot = this.leaveSlot.bind(this);\n    this.clickSlot = this.clickSlot.bind(this);\n  }\n\n\n  getCardName(id) {\n    return null;\n  }\n\n  componentDidMount(){\n  }\n\n  componentDidUpdate() {\n    this.scrollToBottom();\n  }\n\n  scrollToBottom() {\n    animateScroll.scrollToBottom({\n      containerId: \"resultpanel\"\n    });\n  }\n\n  initGame() {\n    /*\n    var component = this;\n    this.socket = socketIOClient.connect(ENDPOINT);\n\n    this.socket.on('socketID', function() {\n      this.emit('new_player',component.state.name,component.props.multiPlayer);\n      if(!component.props.multiPlayer) {\n        component.setState({connected:true});\n      }\n    });\n\n    this.socket.on('player_found', function(otherPlayer,drawReady) {\n      component.setState({playerPick:drawReady, connected:true, otherPlayer:otherPlayer,otherPlayerFound:true});\n      if(component.state.playerPick) {\n        var cardMessage = \"Choose a card, try and transmit that image to \" + component.state.otherPlayer.name;\n        var cardsDisabled = false;\n      } else {\n        var cardMessage = \"Please wait for \" + component.state.otherPlayer.name + \" to select a card\";\n        var cardsDisabled = true;\n      }\n      component.setState({cardMessage:cardMessage, cardsDisabled:cardsDisabled});\n      if(!drawReady) {\n        //Signal to the server to start the other player\n        this.emit('other_player_start',otherPlayer.id);\n      }\n    });\n\n    this.socket.on('card_drawn', function() {\n    });\n\n    this.socket.on('guess_result', function(cardNo) {\n    });\n\n    this.socket.on('draw_again', function(result) {\n      //Allow the player to draw another card\n      if(result) {\n        var cardMessage = component.state.otherPlayer.name + \" guessed Correctly! Please pick another card\";\n      } else {\n        var cardMessage = component.state.otherPlayer.name + \" guessed Incorrectly! Please pick another card\";\n      }\n      component.setState({playerPickedCard:false, cardsDisabled:false, cardMessage:cardMessage, cardDrawn:false});\n    });\n\n    this.socket.on('turn_change', function() {\n    });\n    */\n  }\n\n\n\n  clickCard(e) {\n  }\n\n  drawCard(e) {\n  }\n\n  handleChangeCardCount(e) {\n  }\n\n  handleChangeName(e) {\n    this.setState({name:e.target.value});\n  }\n\n  handleStart() {\n    this.setState({isStart:false});\n    this.initGame();\n  }\n\n  finish() {\n    if(this.props.multiPlayer) {\n      //Rules for other player dropping out - decided to kick both off and show message\n      this.socket.emit('multiplayer_finished',this.state.otherPlayer.id,true);\n      this.setState({iDisconnected:true});\n    } else {\n      this.socket.disconnect();\n      var verdict = this.getVerdict(this.state.results.filter(r => r.result).length, this.state.results.length,true);\n      this.setState({isFinished:true,verdict:verdict});\n    }\n  }\n\n  goToHome() {\n    this.props.history.push('/')\n  }\n\n  getVerdict(totalCorrect,total,isMe) {\n  }\n\n\n  hoverSlot(e) {\n  }\n\n  leaveSlot(e) {\n\n  }\n\n  clickSlot(e) {\n    var row = e.target.id % 10;\n    var col = Math.floor(e.target.id / 10);\n\n    for(var i=row;i<7;i++) {\n      //var grrow = this.state.grid[row];\n      //var grcol = grrow.filter(grid => grid.idx == col*10+i);\n      var grrow = this.state.grid[i-1];\n      var grcol = grrow[col-1];\n      console.log(grrow);\n      console.log(col*10+i);\n      //console.log(grcol);\n    }\n    console.log(row,\" \",col);\n  }\n\n  render() {\n    /*\n    if(!this.props.multiPlayer) {\n      var selectedCard = <Col>{ !this.state.guessMade ? <img src={placeholder} alt=\"placeholder\" className=\"card\"/> : <img src={this.state.cardSelection} alt=\"placeholder\" className=\"card\"/> }</Col>;\n    } else {\n      var selectedCard = <Col>{ !this.state.guessMade && !this.state.playerPickedCard ? <img src={placeholder} alt=\"placeholder\" className=\"card\"/> : <img src={this.state.cardSelection}  alt=\"placeholder\" className=\"card\"/> }</Col>;\n    }\n\n    if(this.state.isFinished && this.props.multiPlayer && !this.state.playerDisconnect) {\n      console.log(this.state.otherPlayer);\n      //Produce a panel to show the other player results\n      var otherResults = [];\n      for(var i=0;i<this.state.otherPlayer.cards.length;i++) {\n        otherResults.push({card:this.getCardName(parseInt(this.state.otherPlayer.cards[i])),result:this.state.otherPlayer.results[i]});\n      }\n      var otherPlayerResults =  <Col><div className=\"resultpanel\">{ otherResults.map( (result,idx) => (\n                                  <Row key={idx}>\n                                    <Col><img alt=\"card\" src={result.card}></img></Col>\n                                    <Col>\n                                      { !result.result ? <img src={mistake} alt=\"cross\" className=\"iconsmall\"></img> : <img src={tick} alt=\"tick\" className=\"iconsmall\"></img>  }\n                                    </Col>\n                                  </Row>\n                                ))}</div></Col>\n      var otherPlayerScore = <Col>{otherResults.filter(r => r.result).length}  /  { otherResults.length }</Col>\n      var otherPlayerName = <Col>{this.state.otherPlayer.name}</Col>;\n    } else {\n      var otherPlayerName = <Row><Col></Col></Row>;\n      var otherPlayerResults = <Col></Col>;\n      var otherPlayerScore = <Col></Col>;\n    }\n\n    if(!this.props.multiPlayer) {\n      var drawButton = <div>{this.state.connected && this.state.drawReady ? <Button variant=\"outline-warning\" onClick={this.drawCard}>Draw Card</Button> : <Button variant=\"outline-warning\" disabled>Draw Card</Button> }</div>\n    } else {\n      var drawButton = null;\n    }*/\n\n    if(this.state.isStart) {\n      return (\n        <Container>\n          <Row>\n            <Col>\n              <label>Enter a nickname:</label>\n            </Col>\n            <Col>\n              <input value={this.state.name} className=\"form-control\" onChange={this.handleChangeName}/>\n            </Col>\n          </Row><br/>\n          <Row>\n            <Col md={6}>\n              <label>Select number of tries:</label>\n            </Col>\n            <Col md={3}>\n              <NumericInput min={1} max={100} value={this.state.numberOfCards} onChange={this.handleChangeCardCount}/>\n            </Col>\n            <Col md={3}></Col>\n          </Row>\n          <Row>\n            <Col></Col>\n            <Col><p>25 is the recommended value, for the most accurate results, but you can change this to any number between 1 an 100</p></Col>\n          </Row>\n          <Row>\n            <Col md={2}><Button onClick={this.handleStart}>START</Button></Col>\n            <Col md={2}><Button onClick={this.goToHome}> Exit</Button></Col>\n          </Row>\n        </Container>\n      );\n    } else if(this.state.isFinished && !this.state.playerDisconnect) {\n      return (\n        <Container>\n          <Row>\n            <Col><h4>Results:</h4></Col>\n          </Row>\n          <Row>\n            <Col>{this.state.name}</Col>\n          </Row>\n          <Row>\n            <Col>{this.state.results.filter(r => r.result).length}  /  { this.state.results.length } </Col>\n          </Row>\n          <Row>\n            <Col>\n              <div className=\"resultpanel\">{ this.state.results.map( (result,idx) => (\n                  <Row key={idx}>\n                    <Col></Col>\n                    <Col>\n\n                    </Col>\n                  </Row>\n                ))}\n              </div>\n            </Col>\n          </Row>\n          <br/>\n          <Row><Col>{ this.state.verdict }</Col></Row>\n          <br/>\n          <Row><Col>{ this.state.otherPlayerVerdict }</Col></Row>\n          <Row>\n            <Col><Button onClick={this.goToHome}>Exit</Button></Col>\n          </Row>\n        </Container>\n      );\n    } else if(this.state.isFinished && this.state.playerDisconnect) {\n      return (\n        <Container>\n          <Row>\n            <Col>\n            { !this.state.iDisconnected ? <p>The other player has disconnected</p> : <p>You have disconnected</p> }\n            <p>Both players must finish their round for scoring to happen.</p>\n            </Col>\n          </Row>\n          <Row>\n            <Col><Button onClick={this.goToHome}>Exit</Button></Col>\n          </Row>\n        </Container>\n      );\n    } else if(this.props.multiPlayer && !this.state.otherPlayerFound) {\n      return (\n        <Container>\n          <Row>\n            <Col></Col>\n            <Col></Col>\n            <h4>Waiting for other player</h4>\n            <Col></Col>\n            <Col></Col>\n          </Row>\n          <Row>\n            <Col></Col>\n            <Col></Col>\n            <Col><WaitCircle runAnim={true} speed={100}/></Col>\n            <Col></Col>\n            <Col></Col>\n          </Row>\n        </Container>\n      );\n    } else {\n      return (\n          //Main Board\n          <div className=\"panel\">\n              {this.state.grid.map((row,i) => (\n                  <div className='slotrow' key={i}>\n                    { row.map((item) => (\n                      <div onMouseEnter={this.hoverSlot} onMouseLeave={this.leaveSlot} onClick={this.clickSlot} id={item.idx} key={item.idx}>\n                        { <Slot className='slotcol' imageName={item.slot} id={item.idx}/> }\n                      </div>\n                    ))}\n                  </div>\n              ))}\n          </div>\n      );\n    }\n  }\n}\n\nexport default UIPanel;\n"]},"metadata":{},"sourceType":"module"}