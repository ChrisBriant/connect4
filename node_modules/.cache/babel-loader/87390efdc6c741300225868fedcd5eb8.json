{"ast":null,"code":"var _jsxFileName = \"/home/chris/Documents/connect4/src/components/uipanel.js\";\nimport React, { Component } from \"react\";\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Container from 'react-bootstrap/Container';\nimport Button from 'react-bootstrap/Button';\nimport NumericInput from 'react-numeric-input';\nimport WaitCircle from './waitcircle.js';\nimport Slot from './slot';\nimport { animateScroll } from \"react-scroll\";\nimport socketIOClient from \"socket.io-client\";\n/*\nimport circle from '../assets/circle.svg';\nimport square from '../assets/square.svg';\nimport waves from '../assets/waves.svg';\nimport cross from '../assets/cross.svg';\nimport star from '../assets/star.svg';\nimport back from '../assets/back.svg';\nimport tick from '../assets/check-circle-regular.svg';\nimport mistake from '../assets/times-circle-regular.svg';\nimport exit from '../assets/door-open-solid-wh.svg';\nimport placeholder from '../assets/placeholder.svg';\n*/\n\nconst ENDPOINT = \"http://localhost:5000\";\n\nfunction randomNumber(min, max) {\n  return Math.floor(Math.random() * (max - min) + min);\n}\n\nclass UIPanel extends Component {\n  constructor(props) {\n    super(props);\n\n    if (this.props.multiPlayer) {\n      this.initGame();\n      var playerTurn = false;\n    } else {\n      var playerTurn = true;\n    } //Create array for grid\n\n\n    var grid = [];\n\n    for (var i = 1; i < 7; i++) {\n      var cols = [];\n\n      for (var j = 1; j < 7; j++) {\n        cols[j] = {\n          'idx': i * 10 + j,\n          'slot': 'empty'\n        };\n      }\n\n      grid.push(cols);\n    }\n\n    this.state = {\n      name: \"\",\n      isStart: true,\n      cardsDisabled: true,\n      isFinished: false,\n      numberOfCards: 25,\n      drawCount: 0,\n      connected: false,\n      cardDrawn: false,\n      guessMade: false,\n      drawReady: true,\n      otherPlayerFound: false,\n      playerPickedCard: false,\n      playerPick: false,\n      cardMessage: \"Click draw card to select the first card from the server\",\n      //turns: turns,\n      otherPlayerVerdict: null,\n      results: [],\n      grid: grid,\n      playerTurn: playerTurn,\n      playerColor: \"red\",\n      rows: [0, 1, 2, 3, 4, 5],\n      //Related to messagebox\n      gridWidth: 0,\n      gridHeight: 0,\n      displayMessage: 'none',\n      messageWidth: 1,\n      messageHeight: 1,\n      message: \"\"\n    };\n    this.clickCard = this.clickCard.bind(this);\n    this.drawCard = this.drawCard.bind(this);\n    this.handleChangeCardCount = this.handleChangeCardCount.bind(this);\n    this.handleStart = this.handleStart.bind(this);\n    this.handleChangeName = this.handleChangeName.bind(this);\n    this.goToHome = this.goToHome.bind(this);\n    this.initGame = this.initGame.bind(this);\n    this.finish = this.finish.bind(this);\n    this.getCardName = this.getCardName.bind(this);\n    this.getVerdict = this.getVerdict.bind(this);\n    this.scrollToBottom = this.scrollToBottom.bind(this);\n    this.hoverSlot = this.hoverSlot.bind(this);\n    this.leaveSlot = this.leaveSlot.bind(this);\n    this.clickSlot = this.clickSlot.bind(this);\n  }\n\n  getCardName(id) {\n    return null;\n  }\n\n  componentDidMount() {\n    var gridHeight = document.getElementById('content').clientHeight;\n    var gridWidth = document.getElementById('content').clientWidth;\n    this.setState({\n      gridWidth: gridWidth,\n      gridHeight: gridHeight\n    });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.message != this.state.message) {\n      var messageHeight = document.getElementById('message-panel').clientHeight;\n      var messageWidth = document.getElementById('message-panel').clientWidth;\n      this.setState({\n        messageHeight: messageHeight,\n        messageWidth: messageWidth\n      });\n    }\n  }\n\n  scrollToBottom() {\n    animateScroll.scrollToBottom({\n      containerId: \"resultpanel\"\n    });\n  }\n\n  initGame() {\n    var component = this;\n    this.socket = socketIOClient.connect(ENDPOINT);\n    this.socket.on('socketID', function (playerId) {\n      console.log(\"Connect\");\n      this.emit('connect4', component.state.name);\n      component.setState({\n        playerId: playerId\n      });\n    });\n    this.socket.on('pair', function (pair) {\n      console.log(pair, component.state.playerId);\n\n      if (pair[0].id === component.state.playerId.toString()) {\n        console.log(\"playrr 1\");\n        var playerColor = \"red\";\n        var playerTurn = true;\n      } else {\n        var playerColor = \"yellow\";\n        var playerTurn = false;\n      }\n\n      component.setState({\n        pair: pair,\n        playerColor: playerColor,\n        otherPlayerFound: true,\n        playerTurn: playerTurn\n      });\n    });\n    this.socket.on('yourturn', function (grid) {\n      console.log(\"My Turn\");\n      console.log(grid); //Convert grid\n\n      var newGrid = [];\n\n      for (var i = 1; i < 7; i++) {\n        var cols = [];\n        var row = grid[i - 1];\n\n        for (var j = 1; j < 7; j++) {\n          cols[j] = row[j];\n        }\n\n        newGrid.push(cols);\n      }\n\n      component.setState({\n        playerTurn: true,\n        grid: newGrid\n      });\n    });\n    this.socket.on('winner', function (playerId) {\n      if (component.state.playerId === playerId) {\n        var message = \"Congratulations! You have won\";\n      } else {\n        var otherPlayerName = component.state.pair.filter(p => p.id != playerId)[0].name;\n        var message = \"Sorry \" + otherPlayerName + \" has won. Better luck next time\";\n      }\n\n      component.setState({\n        isFinished: true,\n        message: message,\n        displayMessage: \"inline-block\"\n      });\n      this.disconnect();\n    });\n    this.socket.on('otherdisconnected', function () {\n      alert(\"here\");\n      var message = \"Sorry, the other player has disconnected\";\n      component.setState({\n        isFinished: true,\n        message: message,\n        displayMessage: \"inline-block\"\n      });\n      this.disconnect();\n    });\n  }\n  /*\n  initGame() {\n     var component = this;\n    this.socket = socketIOClient.connect(ENDPOINT);\n     this.socket.on('socketID', function() {\n      this.emit('connect4',component.state.name);\n    });\n     this.socket.on('pair', function(pair) {\n      console.log(pair);\n    });\n     this.socket.on('socketID', function() {\n      this.emit('new_player',component.state.name,component.props.multiPlayer);\n      if(!component.props.multiPlayer) {\n        component.setState({connected:true});\n      }\n    });\n     this.socket.on('player_found', function(otherPlayer,drawReady) {\n      component.setState({playerPick:drawReady, connected:true, otherPlayer:otherPlayer,otherPlayerFound:true});\n      if(component.state.playerPick) {\n        var cardMessage = \"Choose a card, try and transmit that image to \" + component.state.otherPlayer.name;\n        var cardsDisabled = false;\n      } else {\n        var cardMessage = \"Please wait for \" + component.state.otherPlayer.name + \" to select a card\";\n        var cardsDisabled = true;\n      }\n      component.setState({cardMessage:cardMessage, cardsDisabled:cardsDisabled});\n      if(!drawReady) {\n        //Signal to the server to start the other player\n        this.emit('other_player_start',otherPlayer.id);\n      }\n    });\n     this.socket.on('card_drawn', function() {\n    });\n     this.socket.on('guess_result', function(cardNo) {\n    });\n     this.socket.on('draw_again', function(result) {\n      //Allow the player to draw another card\n      if(result) {\n        var cardMessage = component.state.otherPlayer.name + \" guessed Correctly! Please pick another card\";\n      } else {\n        var cardMessage = component.state.otherPlayer.name + \" guessed Incorrectly! Please pick another card\";\n      }\n      component.setState({playerPickedCard:false, cardsDisabled:false, cardMessage:cardMessage, cardDrawn:false});\n    });\n     this.socket.on('turn_change', function() {\n    });\n  }*/\n\n\n  clickCard(e) {}\n\n  drawCard(e) {}\n\n  handleChangeCardCount(e) {}\n\n  handleChangeName(e) {\n    this.setState({\n      name: e.target.value\n    });\n  }\n\n  handleStart() {\n    this.setState({\n      isStart: false\n    }); //,displayMessage:'inline-block',message:'This is a message panel'});\n    //this.initGame();\n  }\n  /*\n  finish() {\n    if(this.props.multiPlayer) {\n      //Rules for other player dropping out - decided to kick both off and show message\n      this.socket.emit('multiplayer_finished',this.state.otherPlayer.id,true);\n      this.setState({iDisconnected:true});\n    } else {\n      this.socket.disconnect();\n      var verdict = this.getVerdict(this.state.results.filter(r => r.result).length, this.state.results.length,true);\n      this.setState({isFinished:true,verdict:verdict});\n    }\n  }*/\n\n\n  goToHome() {\n    this.props.history.push('/');\n  }\n\n  getVerdict(totalCorrect, total, isMe) {}\n\n  hoverSlot(e) {}\n\n  leaveSlot(e) {}\n\n  flipGrid(grid) {\n    var newGrid = [];\n\n    for (var i = 1; i < 7; i++) {\n      var newRow = [];\n      newRow.push(0);\n\n      for (var j = 0; j < 6; j++) {\n        var row = grid[j];\n        newRow.push(row[i]);\n      }\n\n      newGrid.push(newRow);\n    }\n\n    return newGrid;\n  }\n\n  transformDiag(grid) {\n    var newGrid = [];\n\n    for (var i = 6; i > 0; i--) {\n      var newRow = [];\n      newRow.push(0);\n      var y = 1;\n\n      for (var j = i; j > 0; j--) {\n        var x = j - 1;\n        var row = grid[x];\n        newRow.push(row[y]);\n        y++;\n      }\n\n      newGrid.push(newRow);\n    }\n\n    for (var i = 6; i > 0; i--) {\n      var newRow = [];\n      newRow.push(0);\n      var y = 5;\n\n      for (var j = 7 - i; j < 7; j++) {\n        var row = grid[y];\n        newRow.push(row[j]);\n        y--;\n      }\n\n      newGrid.push(newRow);\n    }\n\n    return newGrid;\n  }\n\n  transformDiagTopBottom(grid) {\n    var newGrid = [];\n\n    for (var i = 5; i > -1; i--) {\n      var newRow = [];\n      newRow.push(0);\n      var y = 6;\n\n      for (var j = i; j > -1; j--) {\n        //var x = j+1;\n        var row = grid[j];\n        newRow.push(row[y]);\n        y--;\n      }\n\n      newGrid.push(newRow);\n    }\n\n    for (var i = 5; i > -1; i--) {\n      var newRow = [];\n      newRow.push(0);\n      var y = 5;\n\n      for (var j = i; j > -1; j--) {\n        //var x = j+1;\n        var row = grid[y];\n        newRow.push(row[j + 1]);\n        y--;\n      }\n\n      newGrid.push(newRow);\n    }\n\n    return newGrid;\n  }\n\n  check4() {\n    var grid = this.state.grid;\n    var finished = false; //console.log(\"grid\",grid);\n\n    var flipped = this.flipGrid(grid); //console.log(\"flipped\",flipped);\n\n    var diagTransformed = this.transformDiag(grid); //console.log(\"transformed\",diagTransformed)\n\n    var diagTransformedTopBottom = this.transformDiagTopBottom(grid); //console.log(\"transformed\",diagTransformedTopBottom);\n\n    if (this.checkCols(grid, \"col\")) {\n      var finished = true;\n    } else if (this.checkCols(flipped, \"row\")) {\n      var finished = true;\n    } else if (this.checkCols(diagTransformed, \"diag\")) {\n      var finished = true;\n    } else if (this.checkCols(diagTransformedTopBottom, \"diag\")) {\n      var finished = true;\n    }\n\n    console.log(\"Finished\", finished);\n\n    if (this.props.multiPlayer && finished) {\n      alert(\"Here\");\n      this.socket.emit(\"connect4-winner\", this.state.playerId, this.state.pair[0].pairId);\n    } else if (!this.props.multiPlayer && finished) {\n      this.setState({\n        isFinished: finished\n      });\n    } //Check rows\n    //var count4 = 1;\n    //var prev=\"empty\";\n\n  }\n\n  checkCols(grid, ch) {\n    var four = false;\n    var winner = null;\n    var won = false;\n\n    for (var i = 0; i < grid.length; i++) {\n      var col = grid[i];\n      var count4 = 1;\n      var prev = \"empty\";\n\n      for (var j = 1; j < col.length; j++) {\n        if (col[j].slot != \"empty\") {\n          if (col[j].slot === prev) {\n            count4++;\n          } else {\n            count4 = 1;\n          }\n\n          prev = col[j].slot;\n        } else {\n          //console.log(\"e\");\n          prev = col[j].slot; //Reset counter\n\n          count4 = 1;\n        } //console.log(\"slot\", count4, col[j].idx);\n\n\n        if (count4 == 4) {\n          four = true;\n\n          if (!winner) {\n            //As soon as four is reached there is a winner the game is over\n            winner = prev;\n\n            if (prev === this.state.playerColor) {\n              var iAmWinner = true;\n            } else {\n              var iAmWinner = false;\n            }\n\n            this.setState({\n              winner: winner,\n              iAmWinner: iAmWinner\n            });\n          }\n        }\n      }\n    }\n\n    return four;\n  }\n\n  checkFull() {\n    var grid = this.state.grid;\n    var rows = this.state.rows;\n\n    for (var i = 0; i < grid.length; i++) {\n      var empties = grid[i].filter(row => row.slot === \"empty\"); //console.log(empties);\n\n      if (empties.length == 0) {\n        //alert(\"full\");\n        rows = rows.filter(r => r != i);\n      }\n    }\n\n    console.log(rows);\n    this.setState({\n      rows: rows\n    }); //Check empty\n\n    if (rows.length == 0) {\n      return true;\n    } else {\n      return false;\n    }\n    /*\n    if(rows.filter(g => g==0).length == 0) {\n      return true;\n    } else {\n      return false;\n    }*/\n\n  }\n\n  clickSlot(e) {\n    var grid = this.state.grid;\n    var playerTurn = this.state.playerTurn;\n    var computerTurn = false;\n    console.log(\"playerturn\", playerTurn);\n    var row = Math.floor(e.target.id / 10); //var col = e.target.id % 10;\n\n    var grrow = grid[row - 1];\n    var firstSlot = grrow[1].slot;\n\n    if (playerTurn && firstSlot === \"empty\") {\n      var computerTurn = true;\n      /*\n      if(this.state.multiPlayer) {\n        var counterColor = this.state.playerColor;\n      } else {\n        counterColor = \"red\";\n      }*/\n\n      for (var i = 1; i < 7; i++) {\n        playerTurn = false;\n        var grcol = grrow[i];\n\n        if (grcol.slot === \"empty\") {\n          //clear previous\n          if (i > 1) {\n            grrow[i - 1].slot = \"empty\";\n          }\n\n          if (grcol.slot === \"empty\") {\n            grcol.slot = this.state.playerColor;\n          }\n\n          this.setState({\n            grid: grid\n          });\n        }\n      }\n\n      if (this.props.multiPlayer) {\n        console.log(\"Here\", this.state.grid);\n        this.socket.emit('connect4-turntaken', this.state.playerId, this.state.pair[0].pairId, this.state.grid);\n      }\n\n      this.check4();\n    } else {\n      computerTurn = false;\n    }\n\n    if (this.checkFull()) {\n      this.setState({\n        isFinished: true\n      });\n    } else {\n      if (!this.props.multiPlayer && computerTurn) {\n        //Computer turn\n        var rows = this.state.rows;\n        var slot = rows[randomNumber(0, rows.length)];\n        /*\n        while(grid[slot][1].slot != \"empty\") {\n          console.log(\"selecting another\");\n          slot = rows[randomNumber(0,rows.length)];\n        }*/\n\n        var grrow = grid[slot];\n\n        for (var i = 1; i < 7; i++) {\n          var grcol = grrow[i];\n\n          if (grcol.slot === \"empty\") {\n            //clear previous\n            if (i > 1) {\n              grrow[i - 1].slot = \"empty\";\n            }\n\n            if (grcol.slot === \"empty\") {\n              grcol.slot = \"yellow\";\n            }\n\n            this.setState({\n              grid: grid\n            });\n          }\n        }\n\n        this.check4();\n        playerTurn = true;\n      }\n\n      if (this.checkFull()) {\n        this.setState({\n          isFinished: true\n        });\n      }\n    }\n\n    this.setState({\n      playerTurn: playerTurn\n    });\n  }\n\n  render() {\n    console.log(\"Message Panel Dim\", this.state.messageWidth);\n    var messagePanelPos = {\n      left: this.state.gridWidth / 2 - this.state.messageWidth / 2 + 'px',\n      top: this.state.gridHeight / 2 - this.state.messageHeight / 2 + 'px',\n      display: this.state.displayMessage\n    };\n    var messagePanel = /*#__PURE__*/React.createElement(\"div\", {\n      id: \"message-panel\",\n      className: \"message-panel\",\n      style: messagePanelPos,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 563,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 564,\n        columnNumber: 7\n      }\n    }, this.state.message));\n\n    if (!this.state.isFinished) {\n      var grid = /*#__PURE__*/React.createElement(\"div\", {\n        id: \"grid\",\n        className: \"panel\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 569,\n          columnNumber: 7\n        }\n      }, this.state.grid.map((row, i) => /*#__PURE__*/React.createElement(\"div\", {\n        className: \"slotrow\",\n        key: i,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 571,\n          columnNumber: 15\n        }\n      }, row.map(item => /*#__PURE__*/React.createElement(\"div\", {\n        onMouseEnter: this.hoverSlot,\n        onMouseLeave: this.leaveSlot,\n        onClick: this.clickSlot,\n        id: item.idx,\n        key: item.idx,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 573,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(Slot, {\n        className: \"slotcol\",\n        imageName: item.slot,\n        id: item.idx,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 574,\n          columnNumber: 23\n        }\n      }))))));\n    } else {\n      //Make grid unclickable\n      var grid = /*#__PURE__*/React.createElement(\"div\", {\n        id: \"grid\",\n        className: \"panel\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 583,\n          columnNumber: 7\n        }\n      }, this.state.grid.map((row, i) => /*#__PURE__*/React.createElement(\"div\", {\n        className: \"slotrow\",\n        key: i,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 585,\n          columnNumber: 15\n        }\n      }, row.map(item => /*#__PURE__*/React.createElement(\"div\", {\n        id: item.idx,\n        key: item.idx,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 587,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(Slot, {\n        className: \"slotcol\",\n        imageName: item.slot,\n        id: item.idx,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 588,\n          columnNumber: 23\n        }\n      }))))));\n    }\n    /*\n    if(!this.props.multiPlayer) {\n      var selectedCard = <Col>{ !this.state.guessMade ? <img src={placeholder} alt=\"placeholder\" className=\"card\"/> : <img src={this.state.cardSelection} alt=\"placeholder\" className=\"card\"/> }</Col>;\n    } else {\n      var selectedCard = <Col>{ !this.state.guessMade && !this.state.playerPickedCard ? <img src={placeholder} alt=\"placeholder\" className=\"card\"/> : <img src={this.state.cardSelection}  alt=\"placeholder\" className=\"card\"/> }</Col>;\n    }\n     if(this.state.isFinished && this.props.multiPlayer && !this.state.playerDisconnect) {\n      console.log(this.state.otherPlayer);\n      //Produce a panel to show the other player results\n      var otherResults = [];\n      for(var i=0;i<this.state.otherPlayer.cards.length;i++) {\n        otherResults.push({card:this.getCardName(parseInt(this.state.otherPlayer.cards[i])),result:this.state.otherPlayer.results[i]});\n      }\n      var otherPlayerResults =  <Col><div className=\"resultpanel\">{ otherResults.map( (result,idx) => (\n                                  <Row key={idx}>\n                                    <Col><img alt=\"card\" src={result.card}></img></Col>\n                                    <Col>\n                                      { !result.result ? <img src={mistake} alt=\"cross\" className=\"iconsmall\"></img> : <img src={tick} alt=\"tick\" className=\"iconsmall\"></img>  }\n                                    </Col>\n                                  </Row>\n                                ))}</div></Col>\n      var otherPlayerScore = <Col>{otherResults.filter(r => r.result).length}  /  { otherResults.length }</Col>\n      var otherPlayerName = <Col>{this.state.otherPlayer.name}</Col>;\n    } else {\n      var otherPlayerName = <Row><Col></Col></Row>;\n      var otherPlayerResults = <Col></Col>;\n      var otherPlayerScore = <Col></Col>;\n    }\n     if(!this.props.multiPlayer) {\n      var drawButton = <div>{this.state.connected && this.state.drawReady ? <Button variant=\"outline-warning\" onClick={this.drawCard}>Draw Card</Button> : <Button variant=\"outline-warning\" disabled>Draw Card</Button> }</div>\n    } else {\n      var drawButton = null;\n    }*/\n\n\n    if (this.state.isStart) {\n      return /*#__PURE__*/React.createElement(Container, {\n        id: \"content\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 636,\n          columnNumber: 9\n        }\n      }, messagePanel, /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 638,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 639,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 640,\n          columnNumber: 15\n        }\n      }, \"Enter a nickname:\")), /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 642,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"input\", {\n        value: this.state.name,\n        className: \"form-control\",\n        onChange: this.handleChangeName,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 643,\n          columnNumber: 15\n        }\n      }))), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 645,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 646,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        md: 6,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 647,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 648,\n          columnNumber: 15\n        }\n      }, \"Select number of tries:\")), /*#__PURE__*/React.createElement(Col, {\n        md: 3,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 650,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(NumericInput, {\n        min: 1,\n        max: 100,\n        value: this.state.numberOfCards,\n        onChange: this.handleChangeCardCount,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 651,\n          columnNumber: 15\n        }\n      })), /*#__PURE__*/React.createElement(Col, {\n        md: 3,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 653,\n          columnNumber: 13\n        }\n      })), /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 655,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 656,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 657,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 657,\n          columnNumber: 18\n        }\n      }, \"25 is the recommended value, for the most accurate results, but you can change this to any number between 1 an 100\"))), /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 659,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        md: 2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 660,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        onClick: this.handleStart,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 660,\n          columnNumber: 25\n        }\n      }, \"START\")), /*#__PURE__*/React.createElement(Col, {\n        md: 2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 661,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        onClick: this.goToHome,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 661,\n          columnNumber: 25\n        }\n      }, \" Exit\"))));\n      /*} else if(this.state.isFinished && !this.state.multiPlayer) {\n        return(\n          <Container>\n            <Row>\n              <Col><h4>Results:</h4></Col>\n            </Row>\n            <Row>\n              <Col><p>No one has won!</p></Col>\n            </Row>\n          </Container>\n        )*/\n\n      /*} else if(this.state.isFinished && !this.state.playerDisconnect) {\n        return (\n          <Container id=\"content\">\n            {messagePanel}\n            <Row>\n              <Col><h4>Results:</h4></Col>\n            </Row>\n            <Row>\n              <Col>{this.state.name}</Col>\n            </Row>\n            <Row>\n              <Col>{this.state.results.filter(r => r.result).length}  /  { this.state.results.length } </Col>\n            </Row>\n            <Row>\n              <Col>\n                <div className=\"resultpanel\">{ this.state.results.map( (result,idx) => (\n                    <Row key={idx}>\n                      <Col></Col>\n                      <Col>\n                       </Col>\n                    </Row>\n                  ))}\n                </div>\n              </Col>\n            </Row>\n            <br/>\n            <Row><Col>{ this.state.verdict }</Col></Row>\n            <br/>\n            <Row><Col>{ this.state.otherPlayerVerdict }</Col></Row>\n            <Row>\n              <Col><Button onClick={this.goToHome}>Exit</Button></Col>\n            </Row>\n          </Container>\n        );*/\n    } else if (this.state.isFinished && this.state.playerDisconnect) {\n      return /*#__PURE__*/React.createElement(Container, {\n        id: \"content\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 713,\n          columnNumber: 9\n        }\n      }, messagePanel, /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 715,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 716,\n          columnNumber: 13\n        }\n      }, !this.state.iDisconnected ? /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 717,\n          columnNumber: 43\n        }\n      }, \"The other player has disconnected\") : /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 717,\n          columnNumber: 86\n        }\n      }, \"You have disconnected\"), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 718,\n          columnNumber: 13\n        }\n      }, \"Both players must finish their round for scoring to happen.\"))), /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 721,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 722,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        onClick: this.goToHome,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 722,\n          columnNumber: 18\n        }\n      }, \"Exit\"))));\n    } else if (this.props.multiPlayer && !this.state.otherPlayerFound) {\n      return /*#__PURE__*/React.createElement(Container, {\n        id: \"content\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 728,\n          columnNumber: 9\n        }\n      }, messagePanel, /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 730,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 731,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 732,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(\"h4\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 733,\n          columnNumber: 13\n        }\n      }, \"Waiting for other player\"), /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 734,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 735,\n          columnNumber: 13\n        }\n      })), /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 737,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 738,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 739,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 740,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(WaitCircle, {\n        runAnim: true,\n        speed: 100,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 740,\n          columnNumber: 18\n        }\n      })), /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 741,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 742,\n          columnNumber: 13\n        }\n      })));\n    } else {\n      return (\n        /*#__PURE__*/\n        //Main Board\n        React.createElement(Container, {\n          id: \"content\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 749,\n            columnNumber: 11\n          }\n        }, messagePanel, grid)\n      );\n    }\n  }\n\n}\n\nexport default UIPanel;","map":{"version":3,"sources":["/home/chris/Documents/connect4/src/components/uipanel.js"],"names":["React","Component","Row","Col","Container","Button","NumericInput","WaitCircle","Slot","animateScroll","socketIOClient","ENDPOINT","randomNumber","min","max","Math","floor","random","UIPanel","constructor","props","multiPlayer","initGame","playerTurn","grid","i","cols","j","push","state","name","isStart","cardsDisabled","isFinished","numberOfCards","drawCount","connected","cardDrawn","guessMade","drawReady","otherPlayerFound","playerPickedCard","playerPick","cardMessage","otherPlayerVerdict","results","playerColor","rows","gridWidth","gridHeight","displayMessage","messageWidth","messageHeight","message","clickCard","bind","drawCard","handleChangeCardCount","handleStart","handleChangeName","goToHome","finish","getCardName","getVerdict","scrollToBottom","hoverSlot","leaveSlot","clickSlot","id","componentDidMount","document","getElementById","clientHeight","clientWidth","setState","componentDidUpdate","prevProps","prevState","containerId","component","socket","connect","on","playerId","console","log","emit","pair","toString","newGrid","row","otherPlayerName","filter","p","disconnect","alert","e","target","value","history","totalCorrect","total","isMe","flipGrid","newRow","transformDiag","y","x","transformDiagTopBottom","check4","finished","flipped","diagTransformed","diagTransformedTopBottom","checkCols","pairId","ch","four","winner","won","length","col","count4","prev","slot","iAmWinner","checkFull","empties","r","computerTurn","grrow","firstSlot","grcol","render","messagePanelPos","left","top","display","messagePanel","map","item","idx","playerDisconnect","iDisconnected"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Container from 'react-bootstrap/Container';\nimport Button from 'react-bootstrap/Button';\nimport NumericInput from 'react-numeric-input';\nimport WaitCircle from './waitcircle.js';\nimport Slot from './slot';\nimport { animateScroll } from \"react-scroll\";\nimport socketIOClient from \"socket.io-client\";\n\n/*\nimport circle from '../assets/circle.svg';\nimport square from '../assets/square.svg';\nimport waves from '../assets/waves.svg';\nimport cross from '../assets/cross.svg';\nimport star from '../assets/star.svg';\nimport back from '../assets/back.svg';\nimport tick from '../assets/check-circle-regular.svg';\nimport mistake from '../assets/times-circle-regular.svg';\nimport exit from '../assets/door-open-solid-wh.svg';\nimport placeholder from '../assets/placeholder.svg';\n*/\n\nconst ENDPOINT = \"http://localhost:5000\";\n\nfunction randomNumber(min, max) {\n    return Math.floor(Math.random() * (max - min) + min);\n}\n\nclass UIPanel extends Component {\n\n\n  constructor(props) {\n    super(props);\n    if(this.props.multiPlayer) {\n      this.initGame();\n      var playerTurn = false;\n    } else {\n      var playerTurn = true;\n    }\n\n    //Create array for grid\n    var grid = [];\n    for(var i=1;i<7;i++) {\n      var cols = [];\n      for(var j=1;j<7;j++) {\n        cols[j] = {'idx':i*10+j,'slot':'empty'};\n      }\n      grid.push(cols);\n    }\n\n    this.state = {\n      name: \"\",\n      isStart: true,\n      cardsDisabled: true,\n      isFinished: false,\n      numberOfCards: 25,\n      drawCount: 0,\n      connected: false,\n      cardDrawn: false,\n      guessMade: false,\n      drawReady: true,\n      otherPlayerFound: false,\n      playerPickedCard: false,\n      playerPick: false,\n      cardMessage: \"Click draw card to select the first card from the server\",\n      //turns: turns,\n      otherPlayerVerdict:null,\n      results: [],\n      grid: grid,\n      playerTurn: playerTurn,\n      playerColor: \"red\",\n      rows: [0,1,2,3,4,5],\n      //Related to messagebox\n      gridWidth:0,\n      gridHeight:0,\n      displayMessage:'none',\n      messageWidth:1,\n      messageHeight:1,\n      message: \"\"\n    }\n    this.clickCard = this.clickCard.bind(this);\n    this.drawCard = this.drawCard.bind(this);\n    this.handleChangeCardCount = this.handleChangeCardCount.bind(this);\n    this.handleStart = this.handleStart.bind(this);\n    this.handleChangeName = this.handleChangeName.bind(this);\n    this.goToHome = this.goToHome.bind(this);\n    this.initGame = this.initGame.bind(this);\n    this.finish = this.finish.bind(this);\n    this.getCardName = this.getCardName.bind(this);\n    this.getVerdict = this.getVerdict.bind(this);\n    this.scrollToBottom = this.scrollToBottom.bind(this);\n    this.hoverSlot = this.hoverSlot.bind(this);\n    this.leaveSlot = this.leaveSlot.bind(this);\n    this.clickSlot = this.clickSlot.bind(this);\n  }\n\n\n  getCardName(id) {\n    return null;\n  }\n\n  componentDidMount(){\n    var gridHeight = document.getElementById('content').clientHeight;\n    var gridWidth = document.getElementById('content').clientWidth;\n    this.setState({gridWidth:gridWidth,gridHeight:gridHeight});\n  }\n\n  componentDidUpdate(prevProps,prevState){\n    if(prevState.message != this.state.message) {\n      var messageHeight = document.getElementById('message-panel').clientHeight;\n      var messageWidth = document.getElementById('message-panel').clientWidth;\n      this.setState({messageHeight:messageHeight,messageWidth:messageWidth});\n    }\n  }\n\n\n  scrollToBottom() {\n    animateScroll.scrollToBottom({\n      containerId: \"resultpanel\"\n    });\n  }\n\n\n  initGame() {\n\n    var component = this;\n    this.socket = socketIOClient.connect(ENDPOINT);\n\n    this.socket.on('socketID', function(playerId) {\n      console.log(\"Connect\");\n      this.emit('connect4',component.state.name);\n      component.setState({playerId:playerId});\n    });\n\n    this.socket.on('pair', function(pair) {\n      console.log(pair,component.state.playerId);\n      if(pair[0].id === component.state.playerId.toString()) {\n        console.log(\"playrr 1\")\n        var playerColor = \"red\";\n        var playerTurn = true;\n      } else {\n        var playerColor = \"yellow\";\n        var playerTurn = false;\n      }\n      component.setState({pair:pair,playerColor:playerColor,otherPlayerFound:true,playerTurn:playerTurn});\n    });\n\n    this.socket.on('yourturn', function(grid) {\n      console.log(\"My Turn\");\n      console.log(grid);\n      //Convert grid\n      var newGrid = [];\n      for(var i=1;i<7;i++) {\n        var cols = [];\n        var row = grid[i-1];\n        for(var j=1;j<7;j++) {\n          cols[j] = row[j];\n        }\n        newGrid.push(cols);\n      }\n      component.setState({playerTurn:true,grid:newGrid});\n    });\n\n    this.socket.on('winner', function(playerId) {\n      if(component.state.playerId === playerId) {\n        var message = \"Congratulations! You have won\"\n      } else {\n        var otherPlayerName = component.state.pair.filter(p => p.id != playerId)[0].name;\n        var message = \"Sorry \" + otherPlayerName + \" has won. Better luck next time\";\n      }\n      component.setState({isFinished:true,message:message,displayMessage:\"inline-block\"});\n      this.disconnect();\n    });\n\n    this.socket.on('otherdisconnected', function() {\n      alert(\"here\");\n      var message = \"Sorry, the other player has disconnected\";\n      component.setState({isFinished:true,message:message,displayMessage:\"inline-block\"});\n      this.disconnect();\n    });\n\n  }\n\n  /*\n  initGame() {\n\n    var component = this;\n    this.socket = socketIOClient.connect(ENDPOINT);\n\n    this.socket.on('socketID', function() {\n      this.emit('connect4',component.state.name);\n    });\n\n    this.socket.on('pair', function(pair) {\n      console.log(pair);\n    });\n\n    this.socket.on('socketID', function() {\n      this.emit('new_player',component.state.name,component.props.multiPlayer);\n      if(!component.props.multiPlayer) {\n        component.setState({connected:true});\n      }\n    });\n\n    this.socket.on('player_found', function(otherPlayer,drawReady) {\n      component.setState({playerPick:drawReady, connected:true, otherPlayer:otherPlayer,otherPlayerFound:true});\n      if(component.state.playerPick) {\n        var cardMessage = \"Choose a card, try and transmit that image to \" + component.state.otherPlayer.name;\n        var cardsDisabled = false;\n      } else {\n        var cardMessage = \"Please wait for \" + component.state.otherPlayer.name + \" to select a card\";\n        var cardsDisabled = true;\n      }\n      component.setState({cardMessage:cardMessage, cardsDisabled:cardsDisabled});\n      if(!drawReady) {\n        //Signal to the server to start the other player\n        this.emit('other_player_start',otherPlayer.id);\n      }\n    });\n\n    this.socket.on('card_drawn', function() {\n    });\n\n    this.socket.on('guess_result', function(cardNo) {\n    });\n\n    this.socket.on('draw_again', function(result) {\n      //Allow the player to draw another card\n      if(result) {\n        var cardMessage = component.state.otherPlayer.name + \" guessed Correctly! Please pick another card\";\n      } else {\n        var cardMessage = component.state.otherPlayer.name + \" guessed Incorrectly! Please pick another card\";\n      }\n      component.setState({playerPickedCard:false, cardsDisabled:false, cardMessage:cardMessage, cardDrawn:false});\n    });\n\n    this.socket.on('turn_change', function() {\n    });\n  }*/\n\n\n\n  clickCard(e) {\n  }\n\n  drawCard(e) {\n  }\n\n  handleChangeCardCount(e) {\n  }\n\n  handleChangeName(e) {\n    this.setState({name:e.target.value});\n  }\n\n  handleStart() {\n    this.setState({isStart:false}); //,displayMessage:'inline-block',message:'This is a message panel'});\n    //this.initGame();\n  }\n\n  /*\n  finish() {\n    if(this.props.multiPlayer) {\n      //Rules for other player dropping out - decided to kick both off and show message\n      this.socket.emit('multiplayer_finished',this.state.otherPlayer.id,true);\n      this.setState({iDisconnected:true});\n    } else {\n      this.socket.disconnect();\n      var verdict = this.getVerdict(this.state.results.filter(r => r.result).length, this.state.results.length,true);\n      this.setState({isFinished:true,verdict:verdict});\n    }\n  }*/\n\n  goToHome() {\n    this.props.history.push('/')\n  }\n\n  getVerdict(totalCorrect,total,isMe) {\n  }\n\n\n  hoverSlot(e) {\n  }\n\n  leaveSlot(e) {\n\n  }\n\n  flipGrid(grid) {\n    var newGrid = [];\n\n    for(var i=1;i<7;i++) {\n      var newRow = [];\n      newRow.push(0);\n      for(var j=0;j<6;j++) {\n        var row = grid[j];\n        newRow.push(row[i]);\n      }\n      newGrid.push(newRow);\n    }\n    return newGrid;\n  }\n\n  transformDiag(grid) {\n    var newGrid = [];\n\n    for(var i=6;i>0;i--) {\n      var newRow = [];\n      newRow.push(0);\n      var y = 1;\n      for(var j=i;j>0;j--) {\n        var x = j-1;\n        var row = grid[x];\n        newRow.push(row[y]);\n        y++;\n      }\n      newGrid.push(newRow);\n    }\n\n    for(var i=6;i>0;i--) {\n      var newRow = [];\n      newRow.push(0);\n      var y = 5;\n      for(var j=7-i;j<7;j++) {\n        var row = grid[y];\n        newRow.push(row[j]);\n        y--;\n      }\n      newGrid.push(newRow);\n    }\n\n    return newGrid;\n  }\n\n\n  transformDiagTopBottom(grid) {\n    var newGrid = [];\n\n    for(var i=5;i>-1;i--) {\n      var newRow = [];\n      newRow.push(0);\n      var y = 6;\n      for(var j=i;j>-1;j--) {\n        //var x = j+1;\n        var row = grid[j];\n        newRow.push(row[y]);\n        y--;\n      }\n      newGrid.push(newRow);\n    }\n\n    for(var i=5;i>-1;i--) {\n      var newRow = [];\n      newRow.push(0);\n      var y = 5;\n      for(var j=i;j>-1;j--) {\n        //var x = j+1;\n        var row = grid[y];\n        newRow.push(row[j+1]);\n        y--;\n      }\n      newGrid.push(newRow);\n    }\n\n    return newGrid;\n  }\n\n\n  check4() {\n    var grid = this.state.grid;\n    var finished = false;\n    //console.log(\"grid\",grid);\n    var flipped = this.flipGrid(grid);\n    //console.log(\"flipped\",flipped);\n    var diagTransformed = this.transformDiag(grid);\n    //console.log(\"transformed\",diagTransformed)\n    var diagTransformedTopBottom = this.transformDiagTopBottom(grid);\n    //console.log(\"transformed\",diagTransformedTopBottom);\n    if(this.checkCols(grid,\"col\")) {\n      var finished = true;\n    } else if(this.checkCols(flipped,\"row\")) {\n      var finished = true;\n    } else if(this.checkCols(diagTransformed,\"diag\")) {\n      var finished = true;\n    } else if(this.checkCols(diagTransformedTopBottom,\"diag\")) {\n      var finished = true;\n    }\n\n    console.log(\"Finished\",finished)\n    if(this.props.multiPlayer && finished) {\n      alert(\"Here\");\n      this.socket.emit(\"connect4-winner\",this.state.playerId,this.state.pair[0].pairId);\n    } else if (!this.props.multiPlayer && finished) {\n      this.setState({isFinished:finished});\n    }\n    //Check rows\n    //var count4 = 1;\n    //var prev=\"empty\";\n  }\n\n checkCols(grid,ch) {\n   var four = false;\n   var winner = null;\n   var won = false;\n\n   for(var i=0;i<grid.length;i++) {\n     var col = grid[i];\n     var count4 = 1;\n     var prev=\"empty\";\n     for(var j=1;j<col.length;j++) {\n       if(col[j].slot != \"empty\") {\n         if(col[j].slot === prev) {\n           count4++;\n         } else {\n           count4 = 1;\n         }\n         prev=col[j].slot;\n       } else  {\n         //console.log(\"e\");\n         prev=col[j].slot;\n         //Reset counter\n         count4 = 1;\n       }\n       //console.log(\"slot\", count4, col[j].idx);\n       if(count4 == 4) {\n         four=true;\n         if(!winner) {\n           //As soon as four is reached there is a winner the game is over\n           winner = prev;\n           if(prev === this.state.playerColor) {\n             var iAmWinner = true;\n           } else {\n             var iAmWinner = false;\n           }\n           this.setState({winner:winner,iAmWinner:iAmWinner});\n         }\n       }\n     }\n   }\n   return four;\n }\n\n\n  checkFull() {\n    var grid = this.state.grid;\n    var rows = this.state.rows;\n    for(var i=0;i<grid.length;i++) {\n      var empties = grid[i].filter(row => row.slot === \"empty\");\n      //console.log(empties);\n      if(empties.length == 0) {\n        //alert(\"full\");\n        rows = rows.filter(r => r!=i);\n      }\n    }\n    console.log(rows);\n    this.setState({rows:rows});\n    //Check empty\n    if(rows.length == 0) {\n      return true;\n    } else {\n      return false;\n    }\n    /*\n    if(rows.filter(g => g==0).length == 0) {\n      return true;\n    } else {\n      return false;\n    }*/\n  }\n\n  clickSlot(e) {\n    var grid = this.state.grid;\n    var playerTurn = this.state.playerTurn;\n    var computerTurn = false;\n    console.log(\"playerturn\",playerTurn);\n    var row = Math.floor(e.target.id / 10);\n    //var col = e.target.id % 10;\n    var grrow = grid[row-1];\n\n    var firstSlot = grrow[1].slot\n\n    if(playerTurn && firstSlot ===\"empty\") {\n      var computerTurn = true;\n      /*\n      if(this.state.multiPlayer) {\n        var counterColor = this.state.playerColor;\n      } else {\n        counterColor = \"red\";\n      }*/\n\n      for(var i=1;i<7;i++) {\n        playerTurn = false;\n        var grcol = grrow[i];\n        if(grcol.slot === \"empty\") {\n          //clear previous\n          if(i>1) {\n            grrow[i-1].slot = \"empty\";\n          }\n          if(grcol.slot === \"empty\") {\n            grcol.slot = this.state.playerColor;\n          }\n          this.setState({grid:grid});\n        }\n      }\n      if(this.props.multiPlayer) {\n        console.log(\"Here\",this.state.grid);\n\n        this.socket.emit('connect4-turntaken',this.state.playerId,this.state.pair[0].pairId,this.state.grid);\n      }\n      this.check4();\n    } else {\n      computerTurn = false;\n    }\n    if(this.checkFull()) {\n      this.setState({isFinished:true});\n    } else {\n      if(!this.props.multiPlayer && computerTurn) {\n        //Computer turn\n        var rows = this.state.rows;\n        var slot = rows[randomNumber(0,rows.length)];\n        /*\n        while(grid[slot][1].slot != \"empty\") {\n          console.log(\"selecting another\");\n          slot = rows[randomNumber(0,rows.length)];\n        }*/\n        var grrow = grid[slot];\n        for(var i=1;i<7;i++) {\n          var grcol = grrow[i];\n          if(grcol.slot === \"empty\") {\n            //clear previous\n            if(i>1) {\n              grrow[i-1].slot = \"empty\";\n            }\n            if(grcol.slot === \"empty\") {\n              grcol.slot = \"yellow\";\n            }\n            this.setState({grid:grid});\n          }\n        }\n        this.check4();\n        playerTurn = true;\n      }\n      if(this.checkFull()) {\n        this.setState({isFinished:true});\n      }\n    }\n    this.setState({playerTurn:playerTurn});\n\n  }\n\n  render() {\n    console.log(\"Message Panel Dim\", this.state.messageWidth);\n    var messagePanelPos = {\n      left: (this.state.gridWidth/2 - this.state.messageWidth/2) + 'px',\n      top: (this.state.gridHeight/2 - this.state.messageHeight/2)  + 'px',\n      display: this.state.displayMessage\n    };\n\n    var messagePanel =\n    <div id=\"message-panel\" className=\"message-panel\" style={messagePanelPos}>\n      <p>{this.state.message}</p>\n    </div>;\n\n    if(!this.state.isFinished) {\n      var grid =\n      <div id=\"grid\" className=\"panel\">\n          {this.state.grid.map((row,i) => (\n              <div className='slotrow' key={i}>\n                { row.map((item) => (\n                  <div onMouseEnter={this.hoverSlot} onMouseLeave={this.leaveSlot} onClick={this.clickSlot} id={item.idx} key={item.idx}>\n                    { <Slot className='slotcol' imageName={item.slot} id={item.idx}/> }\n                  </div>\n                ))}\n              </div>\n          ))}\n      </div>;\n    } else {\n      //Make grid unclickable\n      var grid =\n      <div id=\"grid\" className=\"panel\">\n          {this.state.grid.map((row,i) => (\n              <div className='slotrow' key={i}>\n                { row.map((item) => (\n                  <div id={item.idx} key={item.idx}>\n                    { <Slot className='slotcol' imageName={item.slot} id={item.idx}/> }\n                  </div>\n                ))}\n              </div>\n          ))}\n      </div>;\n    }\n\n\n\n    /*\n    if(!this.props.multiPlayer) {\n      var selectedCard = <Col>{ !this.state.guessMade ? <img src={placeholder} alt=\"placeholder\" className=\"card\"/> : <img src={this.state.cardSelection} alt=\"placeholder\" className=\"card\"/> }</Col>;\n    } else {\n      var selectedCard = <Col>{ !this.state.guessMade && !this.state.playerPickedCard ? <img src={placeholder} alt=\"placeholder\" className=\"card\"/> : <img src={this.state.cardSelection}  alt=\"placeholder\" className=\"card\"/> }</Col>;\n    }\n\n    if(this.state.isFinished && this.props.multiPlayer && !this.state.playerDisconnect) {\n      console.log(this.state.otherPlayer);\n      //Produce a panel to show the other player results\n      var otherResults = [];\n      for(var i=0;i<this.state.otherPlayer.cards.length;i++) {\n        otherResults.push({card:this.getCardName(parseInt(this.state.otherPlayer.cards[i])),result:this.state.otherPlayer.results[i]});\n      }\n      var otherPlayerResults =  <Col><div className=\"resultpanel\">{ otherResults.map( (result,idx) => (\n                                  <Row key={idx}>\n                                    <Col><img alt=\"card\" src={result.card}></img></Col>\n                                    <Col>\n                                      { !result.result ? <img src={mistake} alt=\"cross\" className=\"iconsmall\"></img> : <img src={tick} alt=\"tick\" className=\"iconsmall\"></img>  }\n                                    </Col>\n                                  </Row>\n                                ))}</div></Col>\n      var otherPlayerScore = <Col>{otherResults.filter(r => r.result).length}  /  { otherResults.length }</Col>\n      var otherPlayerName = <Col>{this.state.otherPlayer.name}</Col>;\n    } else {\n      var otherPlayerName = <Row><Col></Col></Row>;\n      var otherPlayerResults = <Col></Col>;\n      var otherPlayerScore = <Col></Col>;\n    }\n\n    if(!this.props.multiPlayer) {\n      var drawButton = <div>{this.state.connected && this.state.drawReady ? <Button variant=\"outline-warning\" onClick={this.drawCard}>Draw Card</Button> : <Button variant=\"outline-warning\" disabled>Draw Card</Button> }</div>\n    } else {\n      var drawButton = null;\n    }*/\n\n    if(this.state.isStart) {\n      return (\n        <Container id=\"content\">\n          {messagePanel}\n          <Row>\n            <Col>\n              <label>Enter a nickname:</label>\n            </Col>\n            <Col>\n              <input value={this.state.name} className=\"form-control\" onChange={this.handleChangeName}/>\n            </Col>\n          </Row><br/>\n          <Row>\n            <Col md={6}>\n              <label>Select number of tries:</label>\n            </Col>\n            <Col md={3}>\n              <NumericInput min={1} max={100} value={this.state.numberOfCards} onChange={this.handleChangeCardCount}/>\n            </Col>\n            <Col md={3}></Col>\n          </Row>\n          <Row>\n            <Col></Col>\n            <Col><p>25 is the recommended value, for the most accurate results, but you can change this to any number between 1 an 100</p></Col>\n          </Row>\n          <Row>\n            <Col md={2}><Button onClick={this.handleStart}>START</Button></Col>\n            <Col md={2}><Button onClick={this.goToHome}> Exit</Button></Col>\n          </Row>\n        </Container>\n      );\n    /*} else if(this.state.isFinished && !this.state.multiPlayer) {\n      return(\n        <Container>\n          <Row>\n            <Col><h4>Results:</h4></Col>\n          </Row>\n          <Row>\n            <Col><p>No one has won!</p></Col>\n          </Row>\n        </Container>\n      )*/\n    /*} else if(this.state.isFinished && !this.state.playerDisconnect) {\n      return (\n        <Container id=\"content\">\n          {messagePanel}\n          <Row>\n            <Col><h4>Results:</h4></Col>\n          </Row>\n          <Row>\n            <Col>{this.state.name}</Col>\n          </Row>\n          <Row>\n            <Col>{this.state.results.filter(r => r.result).length}  /  { this.state.results.length } </Col>\n          </Row>\n          <Row>\n            <Col>\n              <div className=\"resultpanel\">{ this.state.results.map( (result,idx) => (\n                  <Row key={idx}>\n                    <Col></Col>\n                    <Col>\n\n                    </Col>\n                  </Row>\n                ))}\n              </div>\n            </Col>\n          </Row>\n          <br/>\n          <Row><Col>{ this.state.verdict }</Col></Row>\n          <br/>\n          <Row><Col>{ this.state.otherPlayerVerdict }</Col></Row>\n          <Row>\n            <Col><Button onClick={this.goToHome}>Exit</Button></Col>\n          </Row>\n        </Container>\n      );*/\n    } else if(this.state.isFinished && this.state.playerDisconnect) {\n      return (\n        <Container id=\"content\">\n          {messagePanel}\n          <Row>\n            <Col>\n            { !this.state.iDisconnected ? <p>The other player has disconnected</p> : <p>You have disconnected</p> }\n            <p>Both players must finish their round for scoring to happen.</p>\n            </Col>\n          </Row>\n          <Row>\n            <Col><Button onClick={this.goToHome}>Exit</Button></Col>\n          </Row>\n        </Container>\n      );\n    } else if(this.props.multiPlayer && !this.state.otherPlayerFound) {\n      return (\n        <Container id=\"content\">\n          {messagePanel}\n          <Row>\n            <Col></Col>\n            <Col></Col>\n            <h4>Waiting for other player</h4>\n            <Col></Col>\n            <Col></Col>\n          </Row>\n          <Row>\n            <Col></Col>\n            <Col></Col>\n            <Col><WaitCircle runAnim={true} speed={100}/></Col>\n            <Col></Col>\n            <Col></Col>\n          </Row>\n        </Container>\n      );\n    } else {\n      return (\n          //Main Board\n          <Container id=\"content\">{messagePanel}{grid}</Container>\n      );\n    }\n  }\n}\n\nexport default UIPanel;\n"]},"metadata":{},"sourceType":"module"}